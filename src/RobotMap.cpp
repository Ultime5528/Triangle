// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::basePilotableThrustL;
std::shared_ptr<SpeedController> RobotMap::basePilotableThrustR;
std::shared_ptr<SpeedController> RobotMap::basePilotableControl;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    basePilotableThrustL.reset(new VictorSP(0));
    lw->AddActuator("BasePilotable", "ThrustL", std::static_pointer_cast<VictorSP>(basePilotableThrustL));
    basePilotableThrustL->SetInverted(true);
    
    basePilotableThrustR.reset(new VictorSP(1));
    lw->AddActuator("BasePilotable", "ThrustR", std::static_pointer_cast<VictorSP>(basePilotableThrustR));
    
    basePilotableControl.reset(new Talon(2));
    lw->AddActuator("BasePilotable", "Control", std::static_pointer_cast<Talon>(basePilotableControl));
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
